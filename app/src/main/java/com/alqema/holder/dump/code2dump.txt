/*
if (instance == null) {
                synchronized(AlqemaDB::class) {
                    if (instance == null) {
                        instance = buildDatabase(context.applicationContext)
                    }
                }
            }
            return instance!!
            */


// Line of title in the Display

<HorizontalScrollView
        android:id="@+id/scrollerContainer"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="@color/grey"
        android:padding="@dimen/_15sdp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent">

        <LinearLayout
            android:layout_width="wrap_content"
            android:layout_height="wrap_content">

            <!--ID-->
            <com.google.android.material.textview.MaterialTextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_margin="@dimen/_5sdp"
                android:text="@string/id"
                android:textAlignment="center"
                android:textColor="@color/white"
                android:textSize="20sp" />
            <!--Name-->
            <com.google.android.material.textview.MaterialTextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_margin="@dimen/_5sdp"
                android:text="@string/name"
                android:textAlignment="center"
                android:textColor="@color/white"
                android:textSize="20sp" />
            <!--Number-->
            <com.google.android.material.textview.MaterialTextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_margin="@dimen/_5sdp"
                android:text="@string/mobile"
                android:textAlignment="center"
                android:textColor="@color/white"
                android:textSize="20sp" />
            <!--Address-->
            <com.google.android.material.textview.MaterialTextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_margin="@dimen/_5sdp"
                android:text="@string/address"
                android:textAlignment="center"
                android:textColor="@color/white"
                android:textSize="20sp" />
            <!--Details-->
            <com.google.android.material.textview.MaterialTextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_margin="@dimen/_5sdp"
                android:text="@string/address"
                android:textAlignment="center"
                android:textColor="@color/white"
                android:textSize="20sp" />
            <!--BelongsTo-->
            <com.google.android.material.textview.MaterialTextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_margin="@dimen/_5sdp"
                android:text="@string/app_name"
                android:textAlignment="center"
                android:textColor="@color/white"
                android:textSize="20sp" />

        </LinearLayout>

    </HorizontalScrollView>


fetchingDataProblem with database viersion code and the livedata witin main thread no viewModel


//        GlobalScope.launch {
//            println("Starting...")
//            try {
//                println("StartingTry...")
//
////                Toast.makeText(
////                    AppController.getInstance(),
////                    "Starting...",
////                    Toast.LENGTH_LONG
////                ).show()
//                val categoryList = repo.getCategories()
//                println("Aftre...")
//
////                Toast.makeText(
////                    AppController.getInstance(),
////                    "After...",
////                    Toast.LENGTH_LONG
////                ).show()
//                withContext(Dispatchers.Main) {
//                    println("Main...")
//
////                    Toast.makeText(
////                        AppController.getInstance(),
////                        "Main...",
////                        Toast.LENGTH_LONG
////                    ).show()
//
//                    if (categoryList.isNullOrEmpty()) {
//                        // Handle the case where categoryList is empty or null
//
//                        println("List Is NullOrEmpty")
////                        Toast.makeText(
////                            AppController.getInstance(),
////                            "List Is NullOrEmpty",
////                            Toast.LENGTH_LONG
////                        ).show()
//                    } else {
//                        println("List Is GOOD")
//                        /*Toast.makeText(
//                            AppController.getInstance(),
//                            "List Is GOOD",
//                            Toast.LENGTH_LONG
//                        ).show()*/
//
//                        setupCategoriesRecycler(ArrayList(categoryList))
//                    }
//                }
//            } catch (e: Exception) {
//                println("Catch")
//                /*
//                Toast.makeText(
//                    AppController.getInstance(),
//                    "Catch...",
//                    Toast.LENGTH_LONG
//                ).show()*/
//                // Log the exception and handle it
//                Log.e("CoroutineError", "Exception while fetching data: ${e.message}")
//            }
//        }


        /*lifecycleScope.launch {
            try {
                val categoryList = withContext(Dispatchers.IO){
                    repo.getCategories()
                }
                withContext(Dispatchers.Main){
                    if (categoryList.isNullOrEmpty()) {
                        // Handle the case where categoryList is empty or null
                        Toast.makeText(
                            AppController.getInstance(),
                            "List Is NullOrEmpty",
                            Toast.LENGTH_LONG
                        ).show()
                    } else {
                        setupCategoriesRecycler(ArrayList(categoryList))
                    }
                }
            } catch (e: Exception) {
                // Log the exception and handle it
                Log.e("CoroutineError", "Exception while fetching data: ${e.message}")
            }
        }*/

//        dbViewModel.getAllCategory().observe(viewLifecycleOwner) { categoryList ->
//            try {
//                if (categoryList.isNullOrEmpty()) {
//                    // Handle the case where categoryList is empty or null
//                } else {
//                    setupCategoriesRecycler(ArrayList(categoryList))
//                }
//            } catch (e: Exception) {
//                // Log the exception and handle it
//                Log.e("LiveDataError", "Exception while computing database live data: ${e.message}")
//            }
//        }

//        viewModelScope.launch {
//            try {
//                val categories = repo.observeCategories().value
//                if (categories.isNullOrEmpty()) {
//                    // Handle the case where categories are empty or null
//                } else {
//                    // Process the categories
//                }
//            } catch (e: Exception) {
//                Log.e("DatabaseViewModel", "Error fetching data: ${e.message}")
//            }
//        }
//

        /*lifecycleScope.launch {
            try {
                val categoryList = dbViewModel.getAllCategory().value
                if (categoryList == null) {
                    Log.e("Database", "Category list is null")
                } else {
                    // Process the categoryList
                }
            } catch (e: Exception) {
                Log.e("Database", "Error fetching data: ${e.message}", e)
            }
        }*/


        /*lifecycleScope.launch {
            try {
                // Fetch data from the repository
                val categoryList1 = repo.observeCategories().value

                if (categoryList1 == null) {
                    Toast.makeText(
                        AppController.getInstance(),
                        "List Is Null",
                        Toast.LENGTH_LONG
                    ).show()
                } else {
                    Toast.makeText(
                        AppController.getInstance(),
                        "List Is NOT Null",
                        Toast.LENGTH_LONG
                    ).show()
                }

                // Observe ViewModel LiveData
                dbViewModel.allCategory.observe(viewLifecycleOwner) { categoryList ->
                    categoryList?.let {
                        setupCategoriesRecycler(ArrayList(it))
                    }
                }
            } catch (e: Exception) {
                // Handle exception here
                Log.e("FetchData", "Error fetching data: ${e.message}")
            }
        }*/

        /*
            lifecycleScope.launch {

                try {
                    Toast.makeText(
                        AppController.getInstance(),
                        "Starting..........",
                        Toast.LENGTH_LONG
                    ).show()

                    val categoryList = dbViewModel.allCategory?.value
                    val categoryList1 = repo.observeCategories()

                    if (categoryList1.value == null) {
                        Toast.makeText(
                            AppController.getInstance(),
                            "List Is Null",
                            Toast.LENGTH_LONG
                        ).show()
                    }
                    if (categoryList1.value != null) {
                        Toast.makeText(
                            AppController.getInstance(),
                            "List Is NOT-Null",
                            Toast.LENGTH_LONG
                        ).show()
                    }
                    categoryList?.let {
                        setupCategoriesRecycler(ArrayList(it))
                    }
                } catch (e: Exception) {
                    // Handle exception here
                    Log.e("FetchData", "Error fetching data: ${e.message}")
                }
            }.start()*/

        /*lifecycleScope.launch {
            try {
                val categoryList = dbViewModel.allCategory?.value
                categoryList?.let {
                    setupCategoriesRecycler(ArrayList(it))
                }
            } catch (e: Exception) {
                // Handle exception here
                Log.e("FetchData", "Error fetching data: ${e.message}")
            }

            *//*val categories = withContext(Dispatchers.IO) {
//                dbViewModel.allCategory.value ?: emptyList()
                repo.observeCategories().value ?: emptyList()
            }
            withContext(Dispatchers.Main) {
                setupCategoriesRecycler(ArrayList(categories))
            }*//*


            *//*
                val data = ArrayList(categories)
                setupCategoriesRecycler(data)
            *//*
        }*/

        /*
        dbViewModel!!.allCategory.observe(this) {
            val data = ArrayList<Category>()
            data.addAll(it)

            setupCategoriesRecycler(data)
        }*/
